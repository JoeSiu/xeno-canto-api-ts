{"version":3,"sources":["../src/index.ts","../src/utils/utils.ts"],"sourcesContent":["// Import the types and utility functions\r\nimport { AdditionalWrapperOption, XCQueryOption, XCResponse } from \"./types\";\r\nimport { convertJsonToXCResponse, constructQueryUrl } from \"./utils/utils\";\r\n\r\n// Define the base URL for the API\r\nexport const BASE_URL = \"https://www.xeno-canto.org/api/2/recordings\";\r\n\r\n/**\r\n * Searches for a query via Fetch API and returns the response and XC response.\r\n *\r\n * @param {string} query - The query to search for.\r\n * @param {XCQueryOption} [options] - Options for the search query.\r\n * @param {number} [page] - The page parameter is optional and is only needed if the results from a given search don't fit in a single page. If specified, page must be an integer between 1 and XCResponse.numPages.\r\n * @param {AdditionalWrapperOption} [additionalOptions] - Additional options for this wrapper.\r\n * @return {Promise<{ url: URL, response: Response; xcResponse: XCResponse }>} A promise that resolves to an object containing the query URL, the response from fetch and a XCResponse object.\r\n */\r\nasync function search(\r\n  query: string,\r\n  options?: XCQueryOption,\r\n  page?: number,\r\n  additionalOptions?: AdditionalWrapperOption,\r\n): Promise<{ url: URL; rawResponse: Response; xcResponse: XCResponse }> {\r\n  // If query is empty and options is not provided, throw an error instantly instead of trying to fetch\r\n  if (!query.trim() && !options) {\r\n    return Promise.reject(\r\n      new Error(\r\n        \"Please ensure that the 'query' parameter is not empty or that the 'options' parameter is provided\",\r\n      ),\r\n    );\r\n  }\r\n\r\n  // Create the query URL\r\n  const url = constructQueryUrl(\r\n    additionalOptions?.baseUrl ?? BASE_URL,\r\n    query,\r\n    options,\r\n    page,\r\n  );\r\n\r\n  // Fetch the response and parse the JSON\r\n  try {\r\n    const rawResponse = await fetch(url);\r\n    const json = await rawResponse.json();\r\n    const xcResponse = convertJsonToXCResponse(json);\r\n\r\n    // If the API returned an error, throw an error\r\n    if (xcResponse.error) {\r\n      Promise.reject(\r\n        new Error(\r\n          `Xeno-Canto API returned error '${xcResponse.error}': ${xcResponse.message}`,\r\n        ),\r\n      );\r\n    }\r\n\r\n    return Promise.resolve({ url, rawResponse, xcResponse });\r\n  } catch (error: any) {\r\n    // Error handling\r\n    console.error(error);\r\n    return Promise.reject(\r\n      new Error(`Failed to perform search: ${error.message}`),\r\n    );\r\n  }\r\n}\r\n\r\nexport { search };\r\nexport * from \"./types\";\r\nexport * from \"./utils\";\r\n","import { XCQueryOption } from \"../types/query\";\r\nimport { XCRecording, XCResponse } from \"../types/response\";\r\n\r\n/**\r\n * Constructs a query URL by appending the provided query string to the base URL and optionally including additional query options.\r\n *\r\n * @param {string} baseUrl - The base URL to which the query string will be appended.\r\n * @param {string} query - The query string to be appended to the base URL.\r\n * @param {XCQueryOption} [options] - Optional additional query options.\r\n * @param {number} [page] - Optional page number.\r\n * @return {URL} The constructed query URL.\r\n */\r\nexport function constructQueryUrl(\r\n  baseUrl: string,\r\n  query: string,\r\n  options?: XCQueryOption,\r\n  page?: number,\r\n): URL {\r\n  let url = new URL(baseUrl);\r\n  let parms = new URLSearchParams();\r\n\r\n  // Append query to search parameters\r\n  const processedQuery = query.trim();\r\n  if (processedQuery) {\r\n    parms.append(\"query\", processedQuery);\r\n  } else {\r\n    parms.append(\"query\", `\"\"`); // As an empty query is not allowed\r\n  }\r\n\r\n  // Append options to search parameters\r\n  if (options) {\r\n    const optionParms = convertXCQueryOptionToSearchParams(options);\r\n    for (let [key, val] of optionParms.entries()) {\r\n      parms.append(key, `\"${val}\"`);\r\n    }\r\n  }\r\n\r\n  // Append page to search parameters\r\n  if (page) {\r\n    parms.append(\"page\", String(page));\r\n  }\r\n\r\n  // Set search parameters\r\n  url.search = parms.toString();\r\n\r\n  return url;\r\n}\r\n\r\n/**\r\n * Converts an XCQueryOption object to a required URL string parameter format. For example: \"grp:\"birds\" cnt:\"United States\" method:\"field recording\"\"\r\n *\r\n * @param {XCQueryOption} option - The XCQueryOption object to convert.\r\n * @return {URLSearchParams} The URLSearchParams object representing the XCQueryOption object.\r\n */\r\nexport function convertXCQueryOptionToSearchParams(\r\n  option: XCQueryOption,\r\n): URLSearchParams {\r\n  const params = new URLSearchParams();\r\n\r\n  if (!option) {\r\n    return params;\r\n  }\r\n\r\n  Object.entries(option).forEach(([key, value]) => {\r\n    params.append(key, String(value ?? \"\"));\r\n  });\r\n\r\n  return params;\r\n}\r\n\r\n/**\r\n * Takes a JSON object and converts it into an XCResponse object.\r\n *\r\n * @param {any} json - The JSON object to be converted.\r\n * @return {XCResponse} The converted XCResponse object.\r\n */\r\nexport function convertJsonToXCResponse(json: any): XCResponse {\r\n  return {\r\n    numRecordings: Number(json[\"numRecordings\"]),\r\n    numSpecies: Number(json[\"numSpecies\"]),\r\n    page: Number(json[\"page\"]),\r\n    numPages: Number(json[\"numPages\"]),\r\n    recordings:\r\n      json[\"recordings\"]?.map((recording: any): XCRecording => {\r\n        return {\r\n          id: recording[\"id\"],\r\n          gen: recording[\"gen\"],\r\n          sp: recording[\"sp\"],\r\n          ssp: recording[\"ssp\"],\r\n          group: recording[\"group\"],\r\n          en: recording[\"en\"],\r\n          rec: recording[\"rec\"],\r\n          cnt: recording[\"cnt\"],\r\n          loc: recording[\"loc\"],\r\n          lat: recording[\"lat\"],\r\n          lng: recording[\"lng\"],\r\n          alt: recording[\"alt\"],\r\n          type: recording[\"type\"],\r\n          sex: recording[\"sex\"],\r\n          stage: recording[\"stage\"],\r\n          method: recording[\"method\"],\r\n          url: recording[\"url\"],\r\n          file: recording[\"file\"],\r\n          fileName: recording[\"file-name\"],\r\n          sono: {\r\n            small: recording[\"sono\"][\"small\"],\r\n            med: recording[\"sono\"][\"med\"],\r\n            large: recording[\"sono\"][\"large\"],\r\n            full: recording[\"sono\"][\"full\"],\r\n          },\r\n          osci: {\r\n            small: recording[\"osci\"][\"small\"],\r\n            med: recording[\"osci\"][\"med\"],\r\n            large: recording[\"osci\"][\"large\"],\r\n          },\r\n          lic: recording[\"lic\"],\r\n          q: recording[\"q\"],\r\n          length: recording[\"length\"],\r\n          time: recording[\"time\"],\r\n          date: recording[\"date\"],\r\n          uploaded: recording[\"uploaded\"],\r\n          also: recording[\"also\"],\r\n          rmk: recording[\"rmk\"],\r\n          birdSeen: recording[\"bird-seen\"],\r\n          animalSeen: recording[\"animal-seen\"],\r\n          playbackUsed: recording[\"playback-used\"],\r\n          temp: recording[\"temp\"],\r\n          regnr: recording[\"regnr\"],\r\n          auto: recording[\"auto\"],\r\n          dvc: recording[\"dvc\"],\r\n          mic: recording[\"mic\"],\r\n          smp: Number(recording[\"smp\"]),\r\n        };\r\n      }) || [],\r\n    error: json[\"error\"],\r\n    message: json[\"message\"],\r\n  };\r\n}\r\n"],"mappings":"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","names":[]}